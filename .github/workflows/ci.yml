name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Format and Lint
        working-directory: ./frontend
        run: |
          npm run format
          npm run lint:fix

      - name: Type Check
        working-directory: ./frontend
        run: npm run type-check

      - name: Run Tests
        working-directory: ./frontend
        run: npm test

      - name: Build Check
        working-directory: ./frontend
        run: npm run build

      - name: Commit Format Changes
        if: github.event_name == 'pull_request'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git diff --quiet && git diff --staged --quiet || git commit -m "style: Auto-format frontend code"

  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            backend/requirements.txt
            ml/requirements.txt

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black isort mypy

      - name: Format Backend Code
        working-directory: ./backend
        run: |
          black .
          isort .

      - name: Run Backend Linter
        working-directory: ./backend
        run: |
          mypy .
          flake8

      - name: Run Backend Tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          ENVIRONMENT: test
        run: |
          python -m pytest --cov=. --cov-report=xml

      - name: Commit Format Changes
        if: github.event_name == 'pull_request'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git diff --quiet && git diff --staged --quiet || git commit -m "style: Auto-format backend code"

  ml-service-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [unit, integration]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: ml/requirements.txt

      # モデルのキャッシュを復元
      - name: Cache ML models
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/huggingface
            ~/.cache/torch
            ml/models
          key: ${{ runner.os }}-ml-models-${{ hashFiles('ml/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-ml-models-

      - name: Install ML Dependencies
        working-directory: ./ml
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black isort mypy

      - name: Format ML Code
        working-directory: ./ml
        run: |
          black .
          isort .

      - name: Run ML Service Linter
        if: matrix.test-group == 'unit'
        working-directory: ./ml
        run: |
          mypy .
          flake8

      - name: Run Unit Tests
        if: matrix.test-group == 'unit'
        working-directory: ./ml
        env:
          PYTORCH_ENABLE_MPS_FALLBACK: 1
          TEST_MODE: lightweight
        run: |
          python -m pytest tests/unit --cov=. --cov-report=xml -v

      - name: Run Integration Tests
        if: matrix.test-group == 'integration'
        working-directory: ./ml
        env:
          PYTORCH_ENABLE_MPS_FALLBACK: 1
          TEST_MODE: full
        run: |
          python -m pytest tests/integration --cov=. --cov-report=xml -v

      - name: Commit Format Changes
        if: github.event_name == 'pull_request'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git diff --quiet && git diff --staged --quiet || git commit -m "style: Auto-format ML service code"

  # Dockerビルドテストは特定の条件でのみ実行
  docker-build-test:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, ml-service-test]
    if: |
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/develop' ||
      contains(github.event.pull_request.files.*.path, '**/Dockerfile') ||
      contains(github.event.pull_request.files.*.path, '**/docker-compose.yml')
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Frontend
        if: contains(github.event.pull_request.files.*.path, 'frontend/Dockerfile') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          load: true
          tags: team21-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Backend
        if: contains(github.event.pull_request.files.*.path, 'backend/Dockerfile') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          load: true
          tags: team21-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build ML Service
        if: contains(github.event.pull_request.files.*.path, 'ml/Dockerfile') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v5
        with:
          context: ./ml
          push: false
          load: true
          tags: team21-ml:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # PRにフォーマット変更をプッシュ
  push-format-changes:
    needs: [frontend-test, backend-test, ml-service-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Push Changes
        run: |
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git push "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" HEAD:${{ github.head_ref }}
