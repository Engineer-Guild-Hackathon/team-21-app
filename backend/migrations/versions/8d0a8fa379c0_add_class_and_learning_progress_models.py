"""Add class and learning progress models

Revision ID: 8d0a8fa379c0
Revises: 20250911_001
Create Date: 2025-09-14 09:36:59.073002

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "8d0a8fa379c0"
down_revision = "20250911_001"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_behavior_records_problem_id"), table_name="behavior_records")
    op.drop_index(op.f("ix_behavior_records_user_id"), table_name="behavior_records")
    op.drop_table("behavior_records")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("hashed_password", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("full_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "role",
            sa.VARCHAR(),
            server_default=sa.text("'student'::character varying"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "is_verified",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("users_pkey")),
        sa.UniqueConstraint(
            "email",
            name=op.f("users_email_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_table(
        "behavior_records",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("problem_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "action_type", sa.VARCHAR(length=64), autoincrement=False, nullable=False
        ),
        sa.Column(
            "start_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "end_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "attempt_count",
            sa.INTEGER(),
            server_default=sa.text("1"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("success", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "approach_description", sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column("emotion_state", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("behavior_records_pkey")),
    )
    op.create_index(
        op.f("ix_behavior_records_user_id"),
        "behavior_records",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_behavior_records_problem_id"),
        "behavior_records",
        ["problem_id"],
        unique=False,
    )
    # ### end Alembic commands ###
